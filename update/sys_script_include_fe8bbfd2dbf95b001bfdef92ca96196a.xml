<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_4s_tricode.TestCryptoJS</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>TestCryptoJS</name>
        <script><![CDATA[var TestCryptoJS = Class.create();
TestCryptoJS.prototype = {
	initialize: function() {
	},
	
	runTest: function(){
		var message = 'message';
		var secret = 'secret';
		var encrypted = CryptoJS.HmacSHA1(message, secret);
		gs.info(gs.base64Encode(encrypted));
		var encrypted2 = CryptoJS.HmacSHA1(message, secret);
		gs.info(gs.base64Encode(encrypted2));
	},
	
	runTest2: function(key, data){
		
		var encrypted = CryptoJS.HmacSHA1(data, key);
		gs.info(this.convertToBase64(encrypted));
		
	},
	
	convertToBase64: function(myHexString){
		var hexArray = myHexString.toString()
		.replace(/\r|\n/g, "")
		.replace(/([\da-fA-F]{2}) ?/g, "0x$1 ")
			.replace(/ +$/, "")
			.split(" ");
			var byteString = String.fromCharCode.apply(null, hexArray);
			var base64string = this.btoa(byteString);
			return base64string;
		},
	
		btoa : function (bin) {
			var tableStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
			var table = tableStr.split("");
			for (var i = 0, j = 0, len = bin.length / 3, base64 = []; i < len; ++i) {
				var a = bin.charCodeAt(j++), b = bin.charCodeAt(j++), c = bin.charCodeAt(j++);
				if ((a | b | c) > 255) throw new Error("String contains an invalid character");
					base64[base64.length] = table[a >> 2] + table[((a << 4) & 63) | (b >> 4)] +
				(isNaN(b) ? "=" : table[((b << 2) & 63) | (c >> 6)]) +
				(isNaN(b + c) ? "=" : table[c & 63]);
			}
			return base64.join("");
		},
		
		type: 'TestTestCryptoJS'
	};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>azanias.sanchez@4thsource.com</sys_created_by>
        <sys_created_on>2018-05-03 16:20:13</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>fe8bbfd2dbf95b001bfdef92ca96196a</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>TestCryptoJS</sys_name>
        <sys_package display_value="TRICODE" source="x_4s_tricode">8912fb2adb789380e3a506e2ca961972</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="TRICODE">8912fb2adb789380e3a506e2ca961972</sys_scope>
        <sys_update_name>sys_script_include_fe8bbfd2dbf95b001bfdef92ca96196a</sys_update_name>
        <sys_updated_by>john.duchock@4thsource.com</sys_updated_by>
        <sys_updated_on>2018-07-25 12:14:19</sys_updated_on>
    </sys_script_include>
</record_update>
